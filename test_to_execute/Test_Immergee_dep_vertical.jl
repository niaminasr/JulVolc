# Include common files and import packages

include("../commons.jl")
include("../meshtools.jl")
include("../assemb2D.jl")
include("../inputoutput.jl")

using Plots

using Images

##########################################################
###  Parameters and Mesh
##########################################################

MeshFile = "../mesh/carre_sans_trou_005.mat"# test in the unit square
# MeshFile = "carre-fin.mat"
PenalConst = 1.e5

rho = 0.1 # Radius of the immersed circle
# rho = 0.0025 # Radius of the immersed circle
thetastep = 0.0005# immersed boundary

# Define Lamé coefficients
Young = 2.5 # Modulus of rigidity
nu = 0.25 # Lamé coefficient
# Young = 16.0 # Modulus of rigidity
# nu = 0.25 # Lamé coefficient

pressure = 0.02
#########################################################
###   Reading the mesh and defining the immersed boundary
#########################################################

println("Reading the mesh")
TheMesh = volcmesh(MeshFile,1)

println("Définition de la frontière immergée")
global Xbound = [0.;0.]
for t in 0:thetastep:(2*pi-thetastep)
    global Xbound = hcat(Xbound,rho*[cos(t);sin(t)])
end
Xbound = copy(Xbound[:,2:end])
Xbound = Xbound .+ 0.5 # Centrage 

Gamma = reservoir2D(Xbound,TheMesh)
local_remesh_2Dline(Gamma)

println("the immersed boundary is created")
# ##########################################################
# ###  Functions for the RHS and associated exact solution
# ##########################################################
function Indicatrice(x::RealVec = [0.; 0.])::Real
    vecteur = x .- [0.5, 0.5]  # Element-wise subtraction

    if norm(vecteur) < rho
        return 0.0
    else
        return 1.0
    end
end

function f(x::RealVec = [0.; 0.])::RealVec
    vecteur = x .- [0.5, 0.5]  # Element-wise subtraction

    if norm(vecteur) < rho
        return ([0.0, 0.0])
    else
        return ([0.0, 0.0])
    end
end

function g(x::RealVec = [0.; 0.])::RealVec
    vecteur = (x .- [0.5 0.5])
    vecteur /= norm(vecteur)

    return(vecteur)
end

function K_epsilon(x::RealVec = [0., 0.])::RealNum
    vecteur = x .- [0.5, 0.5]  # Element-wise subtraction

    if norm(vecteur) < rho
        return (0.00000001)
    else
        return (1.0)
    end
end

function uexact(x::RealVec = [0., 0.])::RealNum
    
    mu = 1.0
    depth = 0.5
    # deltaV = (pi * pressure * (rho * rho))/ mu
    deltaV = (((2*pi*rho*rho*(1-nu*nu))/Young)*pressure)
    # println(deltaV)
    # deltaV = 7.85e-4
    xi = (x[1] - 0.5) / depth

    return ((2.0 * (1 - nu) * deltaV) / (pi * depth)) * (1 / (1 + (xi*xi)))
end
#########################################################
###   Building the system
#########################################################
println("Stiffness assembly for elasticity ")
K = asm_elast_stiff_2D_P1(TheMesh, Young, nu, K_epsilon)

# We have Dirichlet on the boundary of the square and 
# we have a Neumann on the immersed boundary
println("Mass assembly for the boundary")
Mb = asm_bnd_mass_vect_2D_P1(TheMesh, 1)
K = K  + PenalConst*Mb
Mb = asm_bnd_mass_vect_2D_P1(TheMesh, 2)
K = K  + PenalConst*Mb
Mb = asm_bnd_mass_vect_2D_P1(TheMesh, 4)
K = K  + PenalConst*Mb
# Mb = asm_bnd_mass_vect_2D_P1(TheMesh, 3)
# K = K  + PenalConst*Mb

M = asm_mass_vect_2D_P1(TheMesh)
F = M*(meshvector(TheMesh,f, 2))

println("Mass and right-hand side assembly")
M_gamma = asm_immersed_bnd_mass_2D_P1_2DOF(TheMesh, Gamma)
F_gamma =  M_gamma*((+pressure) .* meshvector(TheMesh, g, 2))
F = F + F_gamma

#########################################################
###   Solving the system
#########################################################
nddl = length(F)

Xsol = (K + 1e-16*I) \ F
U = Xsol[1:nddl]

Ux = U[1:2:end]
Uy = U[2:2:end] 

#########################################################
###  Find the nodes on the Ground Boundary
#########################################################
BndSegments = findall(isequal(3) , TheMesh.edges[3,:])
N = length(BndSegments)
Node_number = Vector{Int}(undef, (N + 1))

for i in 1:N
    TheEdge = TheMesh.edges[:,BndSegments[i]]
    Node_number[i] = TheEdge[1]
end
TheEdge = TheMesh.edges[:,BndSegments[N]]
Node_number[N+1] = TheEdge[2]

println(Node_number)

Node_coordinate = zeros(2, (N + 1))
U_err = zeros((N +1))
for i in 1:(N + 1)
    Node_coordinate[:,i] = TheMesh.nodes[:, Node_number[i]]

    U_err[i] = Uy[Node_number[i]] - uexact(Node_coordinate[:,i])
    #  println(Uy[Node_number[i]], "  ", uexact(Node_coordinate[:,i]))
end

Norm_inf =  norm(U_err,Inf)
println("norm Infinie:::", "  ",  norm(U_err,Inf))
# println(U)
#########################################
###  Plots
#########################################
moved_mesh =  move2Dmesh(TheMesh,U,1.)
p = plot2Dmesh(moved_mesh, "../results/move_mesh_fi.png")


u_num = zeros((N+1))
u_ex = zeros((N+1))
x_t = zeros(2, (N+1))
x_t1 = zeros((N+1))
y_t1 = zeros((N+1))
for i in 1:(N + 1)
    x_t[:,i] = Node_coordinate[:,i]
    x_t1[i] = Node_coordinate[1,i]
    y_t1[i] = Node_coordinate[1,i]
    u_ex[i] = uexact(x_t[:,i])
    u_num[i] = Uy[Node_number[i]]
end


u_e  = [x_t1, u_ex]
u_n = [x_t1, u_num]


#########################################
### To compute errors with the vertical displacement with the 
### mesh with a hole please uncomment these lines.
#########################################

# x_t11 = [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.44999999999999996, 0.4, 0.35, 0.30000000000000004, 0.25, 0.19999999999999996, 0.15000000000000002, 0.09999999999999998, 0.050000000000000044, 0.0]
# u_n_trou = [1.7485384307454e-19, 7.505597525229322e-5, 0.0001438471743064931, 0.00021297729219709092, 0.00027850161239078826, 0.00034029121875641934, 0.00039605795266106094, 0.00044391061767608974, 0.00048243874977328845, 0.0005058853091195657, 0.0005145426569216886, 0.0005060836003340023, 0.0004831268173835615, 0.00044551863410223486, 0.0003969579799862536, 0.00034150118386424997, 0.0002795681519990219, 0.0002132616709348732, 0.00014497726740632957, 7.60978573835988e-5, 1.767519865277683e-19]

# x_t11 = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.30000000000000004, 0.19999999999999996, 0.09999999999999998, 0.0]
# u_n_trou = [1.3364161862345821e-17, 0.012635519882439616, 0.02417121191053616, 0.034385750354234246, 0.04256797050935377, 0.045051410741298016, 0.0420973665570087, 0.03430003554089332, 0.024064870757606577, 0.012686690755862075, 1.330066013823454e-17]

# x_t11 = [1.0, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.44999999999999996, 0.4, 0.35, 0.30000000000000004, 0.25, 0.19999999999999996, 0.15000000000000002, 0.09999999999999998, 0.050000000000000044, 0.0]
# u_n_trou = [1.7485384307454e-19, 7.505597525229322e-5, 0.0001438471743064931, 0.00021297729219709092, 0.00027850161239078826, 0.00034029121875641934, 0.00039605795266106094, 0.00044391061767608974, 0.00048243874977328845, 0.0005058853091195657, 0.0005145426569216886, 0.0005060836003340023, 0.0004831268173835615, 0.00044551863410223486, 0.0003969579799862536, 0.00034150118386424997, 0.0002795681519990219, 0.0002132616709348732, 0.00014497726740632957, 7.60978573835988e-5, 1.767519865277683e-19]

# x_t11 = [1.0, 0.99, 0.98, 0.97, 0.96, 0.95, 0.94, 0.9299999999999999, 0.92, 0.91, 0.9, 0.89, 0.88, 0.87, 0.86, 0.85, 0.84, 0.83, 0.8200000000000001, 0.81, 0.8, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.73, 0.72, 0.71, 0.7, 0.69, 0.6799999999999999, 0.6699999999999999, 0.6599999999999999, 0.65, 0.64, 0.63, 0.62, 0.61, 0.6, 0.5900000000000001, 0.5800000000000001, 0.5700000000000001, 0.56, 0.55, 0.54, 0.53, 0.52, 0.51, 0.5, 0.49, 0.48, 0.47, 0.45999999999999996, 0.44999999999999996, 0.43999999999999995, 0.43000000000000005, 0.42000000000000004, 0.41000000000000003, 0.4, 0.39, 0.38, 0.37, 0.36, 0.35, 0.33999999999999997, 0.32999999999999996, 0.31999999999999995, 0.31000000000000005, 0.30000000000000004, 0.29000000000000004, 0.28, 0.27, 0.26, 0.25, 0.24, 0.22999999999999998, 0.21999999999999997, 0.20999999999999996, 0.19999999999999996, 0.18999999999999995, 0.18000000000000005, 0.17000000000000004, 0.16000000000000003, 0.15000000000000002, 0.14, 0.13, 0.12, 0.10999999999999999, 0.09999999999999998, 0.08999999999999997, 0.07999999999999996, 0.06999999999999995, 0.06000000000000005, 0.050000000000000044, 0.040000000000000036, 0.030000000000000027, 0.020000000000000018, 0.010000000000000009, 0.0]
# u_n_trou = [2.768229443354044e-19, 2.0215057439130382e-5, 3.6101368058902155e-5, 5.162618744842449e-5, 6.638970088837326e-5, 8.113185469844458e-5, 9.579067826409135e-5, 0.0001104988605302333, 0.00012498157733916007, 0.0001394897684755914, 0.0001540424314679819, 0.00016837629880482783, 0.00018279577387005717, 0.00019705968816052802, 0.0002112568764947496, 0.00022535418958939468, 0.00023934673771855054, 0.000253252442229432, 0.00026704427595383853, 0.0002807863940967086, 0.0002942747437100413, 0.00030764506587999113, 0.0003209085709845905, 0.0003339289817902484, 0.00034683716159578614, 0.00035947456278259384, 0.000371839330876709, 0.00038408523299696064, 0.00039596401835546814, 0.00040757501572105946, 0.0004189789137030256, 0.00042997807818328566, 0.00044061215028651316, 0.00045084258729314664, 0.0004606745807950501, 0.00047017604538869984, 0.0004791543935483088, 0.00048763782536188194, 0.0004956404685355271, 0.0005031044282594716, 0.0005099617928747681, 0.0005163261081015918, 0.0005220344533992885, 0.0005271496783812979, 0.0005316278607981095, 0.0005354329139332865, 0.0005385691666197266, 0.0005410377172188985, 0.0005427767506457576, 0.0005438463073463596, 0.0005441973704503439, 0.0005438795658500188, 0.0005428031402735992, 0.0005410344681013584, 0.0005386017072374071, 0.0005354723809763242, 0.0005316858795589075, 0.0005271662172240539, 0.0005220951079575015, 0.0005163801915848191, 0.0005101004941149292, 0.0005031283717392846, 0.0004957062571615368, 0.00048768920721216645, 0.0004792232726217735, 0.0004702294094902833, 0.0004607951480071696, 0.00045097819458063756, 0.0004406972733738117, 0.00043001670719080957, 0.00041902612917584474, 0.0004077203953836723, 0.00039606958013207517, 0.00038418644799157673, 0.00037196776577176545, 0.0003595260211629911, 0.0003468834171542841, 0.00033402732114270426, 0.00032094004179075795, 0.0003077457917654424, 0.00029434119433194544, 0.00028078079498426804, 0.0002671397924898077, 0.0002532871261416043, 0.00023942509243927775, 0.00022539506577079875, 0.0002112466127351402, 0.00019708790084777166, 0.00018279393956174256, 0.00016846852091684868, 0.00015403969863957056, 0.00013961163027945633, 0.0001250415974562115, 0.00011044081340905302, 9.584622807810813e-5, 8.123339600806843e-5, 6.63298514274441e-5, 5.1491156541197464e-5, 3.60894063543597e-5, 2.0316941777277257e-5, 2.7554362299538073e-19]

# x_t11 = [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.30000000000000004, 0.19999999999999996, 0.09999999999999998, 0.0]
# u_n_trou = [1.336416186234583e-19, 0.00012635519882439622, 0.00024171211910536177, 0.0003438575035423426, 0.00042567970509353807, 0.0004505141074129806, 0.0004209736655700872, 0.0003430003554089334, 0.00024064870757606587, 0.00012686690755862079, 1.330066013823454e-19]

# x_t11 = [2.0, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.8999999999999999, 0.8, 0.7, 0.6000000000000001, 0.5, 0.3999999999999999, 0.30000000000000004, 0.19999999999999996, 0.10000000000000009, 0.0]
# u_n_trou = [1.7485384307454029e-19, 0.0001501119505045861, 0.00028769434861298577, 0.0004259545843941815, 0.0005570032247815765, 0.0006805824375128389, 0.0007921159053221222, 0.0008878212353521798, 0.0009648774995465773, 0.0010117706182391317, 0.0010290853138433774, 0.0010121672006680054, 0.0009662536347671237, 0.0008910372682044701, 0.0007939159599725076, 0.0006830023677285005, 0.000559136303998044, 0.0004265233418697462, 0.0002899545348126591, 0.00015219571476719754, 1.7675198652776878e-19]

# x_t11 = [2.0, 1.9701492537313432, 1.9402985074626866, 1.9104477611940298, 1.8805970149253732, 1.8507462686567164, 1.8208955223880596, 1.791044776119403, 1.7611940298507462, 1.7313432835820897, 1.7014925373134329, 1.671641791044776, 1.6417910447761195, 1.6119402985074627, 1.582089552238806, 1.5522388059701493, 1.5223880597014925, 1.4925373134328357, 1.462686567164179, 1.4328358208955225, 1.4029850746268657, 1.373134328358209, 1.3432835820895521, 1.3134328358208955, 1.283582089552239, 1.2537313432835822, 1.2238805970149254, 1.1940298507462686, 1.164179104477612, 1.1343283582089554, 1.1044776119402986, 1.0746268656716418, 1.044776119402985, 1.0149253731343284, 0.9850746268656716, 0.955223880597015, 0.9253731343283582, 0.8955223880597014, 0.8656716417910448, 0.835820895522388, 0.8059701492537314, 0.7761194029850746, 0.7462686567164178, 0.7164179104477613, 0.6865671641791045, 0.6567164179104477, 0.6268656716417911, 0.5970149253731343, 0.5671641791044777, 0.5373134328358209, 0.5074626865671641, 0.4776119402985075, 0.4477611940298507, 0.4179104477611941, 0.3880597014925373, 0.3582089552238805, 0.32835820895522394, 0.29850746268656714, 0.26865671641791056, 0.23880597014925375, 0.20895522388059695, 0.17910447761194037, 0.14925373134328357, 0.11940298507462677, 0.08955223880597019, 0.05970149253731338, 0.029850746268656803, 0.0]
# u_n_trou =  [2.485463459639053e-19, 5.598386882208632e-5, 0.00010111315627633906, 0.00014553145780231061, 0.00018939465849751586, 0.0002335004860536386, 0.00027628502965452333, 0.00031970901283554935, 0.0003622664773191338, 0.00040483694630206877, 0.0004466866094173089, 0.000488615584197982, 0.0005295145448541668, 0.0005702848022545882, 0.0006104941431004422, 0.0006497217090321911, 0.0006880905554394259, 0.0007257829976170411, 0.0007621045405566457, 0.0007974691602596327, 0.0008314083775022705, 0.000864254319140832, 0.0008951502181662644, 0.0009244738455257228, 0.0009517245959106537, 0.0009767183843250365, 0.0009996983037392322, 0.001020029744096635, 0.0010378816129962914, 0.001053143176582598, 0.001065236746012759, 0.0010743407141869067, 0.0010807340212662378, 0.0010837130539535274, 0.0010838228130424354, 0.0010808206047186963, 0.0010744365874669477, 0.001065140111894464, 0.0010529500987904988, 0.0010379579502735202, 0.001020037933498411, 0.0009995809067147613, 0.0009767904761455307, 0.0009517097211613934, 0.0009243345028352033, 0.0008952604283823522, 0.000864273987148241, 0.000831672812672307, 0.0007977138360878379, 0.0007623548422022503, 0.0007256104751268574, 0.0006879830287910823, 0.0006497023971136413, 0.0006104141625043042, 0.0005703647069514868, 0.0005298588002171332, 0.0004886567758482253, 0.0004469556557991646, 0.00040490804275249343, 0.0003623103389598289, 0.0003195197127507171, 0.00027649311095268264, 0.00023333247159209873, 0.00018944139612696577, 0.00014555438471933695, 0.0001007935399304091, 5.6192412948599245e-5, 2.467237754671394e-19]

# x_t11 = [2.0, 1.95, 1.9, 1.85, 1.8, 1.75, 1.7, 1.65, 1.6, 1.55, 1.5, 1.45, 1.4, 1.35, 1.3, 1.25, 1.2, 1.15, 1.1, 1.05, 1.0, 0.95, 0.8999999999999999, 0.8500000000000001, 0.8, 0.75, 0.7, 0.6499999999999999, 0.6000000000000001, 0.55, 0.5, 0.44999999999999996, 0.3999999999999999, 0.3500000000000001, 0.30000000000000004, 0.25, 0.19999999999999996, 0.1499999999999999, 0.10000000000000009, 0.050000000000000044, 0.0]
# u_n_trou = [2.1561320348707246e-19, 8.486189088308593e-5, 0.00015825142817217207, 0.00023136522711472468, 0.00030291945641033863, 0.0003739624311550563, 0.00044451452731983035, 0.0005131012038229176, 0.0005805618296816403, 0.0006464758690449154, 0.0007093691458869819, 0.0007697396273066193, 0.0008270317953472775, 0.0008798324728155822, 0.0009275126869690227, 0.000970485228980128, 0.0010063148997941603, 0.0010350179111825127, 0.0010565489868917743, 0.0010691577610964019, 0.0010736323617222359, 0.0010690921912960378, 0.0010564856070002999, 0.0010347860148797357, 0.0010058845677312007, 0.0009701704783251539, 0.0009276389425600159, 0.0008795478258977403, 0.000826393881133615, 0.0007694020733485444, 0.0007094219772662663, 0.0006458966406869161, 0.0005802248062691043, 0.0005131623074246177, 0.00044386575533278665, 0.00037352857869115276, 0.0003030214189129685, 0.00023111614451837517, 0.00015755953623546574, 8.517453172202825e-5, 2.1485857287538994e-19]

# x_t11 = [2.0, 1.95, 1.9, 1.85, 1.8, 1.75, 1.7, 1.65, 1.6, 1.55, 1.5, 1.45, 1.4, 1.35, 1.3, 1.25, 1.2, 1.15, 1.1, 1.05, 1.0, 0.95, 0.8999999999999999, 0.8500000000000001, 0.8, 0.75, 0.7, 0.6499999999999999, 0.6000000000000001, 0.55, 0.5, 0.44999999999999996, 0.3999999999999999, 0.3500000000000001, 0.30000000000000004, 0.25, 0.19999999999999996, 0.1499999999999999, 0.10000000000000009, 0.050000000000000044, 0.0]
# u_n_trou = [5.344876798009476e-20, 2.0707863345436713e-5, 3.8832635190589115e-5, 5.618751069857185e-5, 7.349536098831349e-5, 9.061140091634501e-5, 0.00010746909217678275, 0.0001239206055078938, 0.00013992558631551036, 0.0001552901872394155, 0.00016997922543850422, 0.0001841307173497486, 0.00019718769063461716, 0.0002094371852238077, 0.00022042627456077607, 0.0002300696855381781, 0.0002382674745815437, 0.0002447181372335556, 0.00024941722008997043, 0.0002522668683441755, 0.0002531862537725866, 0.00025224274589849414, 0.00024917263552217875, 0.0002443784400583301, 0.00023768513912683734, 0.000229513183543432, 0.00021970690624618352, 0.00020884933116926036, 0.00019659004394053273, 0.00018344669300129847, 0.0001694325146465905, 0.00015466318312127572, 0.00013942313623178872, 0.0001234756557007726, 0.00010695283967926641, 9.035619540508676e-5, 7.333922239741263e-5, 5.58905378808382e-5, 3.835228908325839e-5, 2.0477710103544854e-5, 5.3578031586845067e-20]

# x_t11 = [2.0, 1.9701492537313432, 1.9402985074626866, 1.9104477611940298, 1.8805970149253732, 1.8507462686567164, 1.8208955223880596, 1.791044776119403, 1.7611940298507462, 1.7313432835820897, 1.7014925373134329, 1.671641791044776, 1.6417910447761195, 1.6119402985074627, 1.582089552238806, 1.5522388059701493, 1.5223880597014925, 1.4925373134328357, 1.462686567164179, 1.4328358208955225, 1.4029850746268657, 1.373134328358209, 1.3432835820895521, 1.3134328358208955, 1.283582089552239, 1.2537313432835822, 1.2238805970149254, 1.1940298507462686, 1.164179104477612, 1.1343283582089554, 1.1044776119402986, 1.0746268656716418, 1.044776119402985, 1.0149253731343284, 0.9850746268656716, 0.955223880597015, 0.9253731343283582, 0.8955223880597014, 0.8656716417910448, 0.835820895522388, 0.8059701492537314, 0.7761194029850746, 0.7462686567164178, 0.7164179104477613, 0.6865671641791045, 0.6567164179104477, 0.6268656716417911, 0.5970149253731343, 0.5671641791044777, 0.5373134328358209, 0.5074626865671641, 0.4776119402985075, 0.4477611940298507, 0.4179104477611941, 0.3880597014925373, 0.3582089552238805, 0.32835820895522394, 0.29850746268656714, 0.26865671641791056, 0.23880597014925375, 0.20895522388059695, 0.17910447761194037, 0.14925373134328357, 0.11940298507462677, 0.08955223880597019, 0.05970149253731338, 0.029850746268656803, 0.0]
# u_n_trou = [6.115236554740621e-20, 1.3835518111853942e-5, 2.5049433621744817e-5, 3.6185180282805896e-5, 4.700497493467721e-5, 5.778677265744091e-5, 6.85017683223442e-5, 7.905988055721385e-5, 8.960751846344138e-5, 9.995338948755305e-5, 0.00011022603420213163, 0.00012035547429906383, 0.0001303311491816745, 0.00014013948327131376, 0.00014974093170940837, 0.00015914328361506187, 0.00016834412770978522, 0.00017725646065410954, 0.00018593088453045157, 0.00019424698370823647, 0.0002022746379974818, 0.0002098952306017187, 0.00021717819831650474, 0.00022398896389930835, 0.00023030871531525774, 0.0002361202130967282, 0.00024141263174560105, 0.0002460964102489166, 0.0002502471247854434, 0.00025370007570874666, 0.0002565412153894447, 0.000258634260165624, 0.0002600658978857891, 0.00026075798261731404, 0.00026073940321858435, 0.0002600577699745899, 0.00025859496008072733, 0.0002564667673755533, 0.00025364829997083364, 0.0002501596073173503, 0.00024608220888351027, 0.00024136345186307568, 0.00023605738020193932, 0.00023024485026077856, 0.00022392409267420248, 0.0002170332349519752, 0.0002098308086471938, 0.0002022091167331068, 0.0001942053722476073, 0.00018584462154977075, 0.0001771387375116691, 0.0001682772594171891, 0.00015908518819261714, 0.00014962550597814853, 0.00014005384958399903, 0.00013023274500024502, 0.00012029954836328996, 0.00011017009989160505, 9.989355902752433e-5, 8.951412593704615e-5, 7.909648094282313e-5, 6.841579221025503e-5, 5.7768930273500356e-5, 4.7092724378995754e-5, 3.606007409275732e-5, 2.506300879137245e-5, 1.3826384482119825e-5, 6.134364039211496e-20]

# sorted_indices = sortperm(x_t1)  # Get sorted indices
# sorted_indices_trou = sortperm(x_t11)  # Get sorted indices
# x_t1_sorted = x_t1[sorted_indices]  # Sort x_t1
# x_t1_trou_sorted = x_t11[sorted_indices_trou]
# u_ex_sorted = u_ex[sorted_indices]  # Reorder u_ex
# u_num_sorted = u_num[sorted_indices]
# u_num_trou_sorted = u_n_trou[sorted_indices_trou]


# # u_ex_sorted = u_e[sortperm(u_e[:, 1]), :]
# # u_num_sorted = u_n[sortperm(u_n[:, 1]), :]
# p1 = plot(x_t1_sorted,u_ex_sorted, title = "Exact solution")
# p2 = plot(x_t1_sorted, u_num_sorted, title = "Num solution")
# p3 = plot(x_t1_trou_sorted, u_num_trou_sorted, title = "Num solution Trou")

# # Supposons que u_num_sorted et u_num_trou_sorted sont déjà définis comme des vecteurs
# num = sqrt(sum((u_num_sorted .- u_num_trou_sorted).^2))  # Norme de la différence des vecteurs
# denum = sqrt(sum(u_num_trou_sorted.^2))  # Norme du vecteur u_num_trou_sorted
# println(num/ denum) 

# num2 = sqrt(sum((u_ex_sorted .- u_num_trou_sorted).^2))  # Norme de la différence des vecteurs
# denum2 = sqrt(sum(u_ex_sorted.^2))  # Norme du vecteur u_num_trou_sorted
# println(num2 / denum2)  # Affichage du ratio

# num3 = sqrt(sum((u_ex_sorted .- u_num_sorted).^2))  # Norme de la différence des vecteurs
# denum3 = sqrt(sum(u_ex_sorted.^2))  # Norme du vecteur u_num_trou_sorted
# println(num3 / denum3)  # Affichage du ratio

# display(plot(p1, p3))
# savefig("../results/comp_with_analytic_sol.png")









